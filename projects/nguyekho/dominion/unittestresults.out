#######################################################################################
----------Unit Test 1: Testing gainCard() function----------

Test Case 1: Supply pile is empty
Test 1 - gainCard() correctly returns -1. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: Card is not used in game
Test 2 - gainCard() correctly returns -1. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

Test Case 3: Supply is available and player chooses to add to deck (toFlag is 1)
Test 3a - gainCard() correctly increments player's deckCount by 1. Result: PASSED.
Test 3b - gainCard() correctly decrements card's supplyCount by 1. Result: PASSED.
Test 3c - gainCard() adds correct card to player's deck. Result: PASSED.
Test 3d - gainCard() doesn't change other players' deckCounts. Result: PASSED.
Test 3e - gainCard() correctly returns 0. Result: PASSED.
Test Case 3 COMPLETED SUCCESSFULLY! 

Test Case 4: Supply is available and player chooses to add to hand (toFlag is 2)
Test 4a - gainCard() correctly increments player's handCount by 1. Result: PASSED.
Test 4b - gainCard() correctly decrements card's supplyCount by 1. Result: PASSED.
Test 4c - gainCard() adds correct card to player's hand. Result: PASSED.
Test 4d - gainCard() doesn't change other players' handCount. Result: PASSED.
Test 4e - gainCard() correctly returns 0. Result: PASSED.
Test Case 4 COMPLETED SUCCESSFULLY! 

Test Case 5: Supply is available and player chooses to add to discard (toFlag is 0)
Test 5a - gainCard() correctly increments player's discardCount by 1. Result: PASSED.
Test 5b - gainCard() correctly decrements card's supplyCount by 1. Result: PASSED.
Test 5c - gainCard() adds correct card to player's discard pile. Result: PASSED.
Test 5d - gainCard() doesn't change other players' discardCount. Result: PASSED.
Test 5e - gainCard() correctly returns 0. Result: PASSED.
Test Case 5 COMPLETED SUCCESSFULLY! 

----------Unit Test 1: Testing gainCard() function COMPLETED----------

#######################################################################################
----------Unit Test 2: Testing isGameOver() function----------

Test Case 1: No supply stack is empty
Test 1 - isGameOver() correctly determines game is not over and returns 0. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: Stack of Province cards is empty
Test 2 - isGameOver() correctly determines game is over and returns 1. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

Test Case 3: Two stacks are empty, none is Province
Test 3 - isGameOver() correctly determines game is not over and returns 0. Result: PASSED.
Test Case 3 COMPLETED SUCCESSFULLY! 

Test Case 4: Three stacks are empty, none is Province
Test 4 - isGameOver() correctly determines game is over and returns 1. Result: PASSED.
Test Case 4 COMPLETED SUCCESSFULLY! 

Test Case 5: Three stacks are empty, one is Province
Test 5 - isGameOver() correctly determines game is over and returns 1. Result: PASSED.
Test Case 5 COMPLETED SUCCESSFULLY! 

Test Case 6: Four (more than three non-Province) stacks are empty
Test 6 - isGameOver() correctly determines game is over and returns 1. Result: PASSED.
Test Case 6 COMPLETED SUCCESSFULLY! 

----------Unit Test 2: Testing isGameOver() function COMPLETED----------

#######################################################################################
----------Unit Test 3: Testing fullDeckCount() function----------

Test Case 1: Counting Smithy when all cards on hand, deck, and discard are Smithy
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 160 - Actual: 160. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 226 - Actual: 226. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 148 - Actual: 148. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 103 - Actual: 103. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 116 - Actual: 116. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 94 - Actual: 94. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 193 - Actual: 193. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 233 - Actual: 233. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 149 - Actual: 149. Result: PASSED.
Test 1 - fullDeckCount() correctly counts Smithy cards for the whole deck. Expected: 194 - Actual: 194. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: Counting Baron when there are other cards on hand, deck, and discard
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 732 - Actual: 732. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 629 - Actual: 629. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 612 - Actual: 612. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 486 - Actual: 486. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 918 - Actual: 918. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 182 - Actual: 182. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 965 - Actual: 965. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 459 - Actual: 459. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 427 - Actual: 427. Result: PASSED.
Test 2 - fullDeckCount() correctly counts Baron cards for the whole deck. Expected: 341 - Actual: 341. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

----------Unit Test 3: Testing fullDeckCount() function COMPLETED----------

#######################################################################################
----------Unit Test 4: Testing getCost() function----------

Test Case 1: getCost() correctly returns -1 for unknown cards
Test 1 - getCost() correctly returns -1. Expected: -1 - Actual: -1. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: getCost() correctly returns cost of known cards
Test 2 - getCost() correctly returns cost of curse. Expected: 0 - Actual: 0. Result: PASSED.
Test 2 - getCost() correctly returns cost of estate. Expected: 2 - Actual: 2. Result: PASSED.
Test 2 - getCost() correctly returns cost of duchy. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of province. Expected: 8 - Actual: 8. Result: PASSED.
Test 2 - getCost() correctly returns cost of copper. Expected: 0 - Actual: 0. Result: PASSED.
Test 2 - getCost() correctly returns cost of silver. Expected: 3 - Actual: 3. Result: PASSED.
Test 2 - getCost() correctly returns cost of gold. Expected: 6 - Actual: 6. Result: PASSED.
Test 2 - getCost() correctly returns cost of adventurer. Expected: 6 - Actual: 6. Result: PASSED.
Test 2 - getCost() correctly returns cost of council_room. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of feast. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of gardens. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of mine. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of remodel. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of smithy. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of village. Expected: 3 - Actual: 3. Result: PASSED.
Test 2 - getCost() correctly returns cost of baron. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of great_hall. Expected: 3 - Actual: 3. Result: PASSED.
Test 2 - getCost() correctly returns cost of minion. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of steward. Expected: 3 - Actual: 3. Result: PASSED.
Test 2 - getCost() correctly returns cost of tribute. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of ambassador. Expected: 3 - Actual: 3. Result: PASSED.
Test 2 - getCost() correctly returns cost of cutpurse. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of embargo. Expected: 2 - Actual: 2. Result: PASSED.
Test 2 - getCost() correctly returns cost of outpost. Expected: 5 - Actual: 5. Result: PASSED.
Test 2 - getCost() correctly returns cost of salvager. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of sea_hag. Expected: 4 - Actual: 4. Result: PASSED.
Test 2 - getCost() correctly returns cost of treasure_map. Expected: 4 - Actual: 4. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

----------Unit Test 4: Testing getCost() function COMPLETED----------

#######################################################################################
----------Card Test 1: Testing smithy card effect----------

Test Case 1: Player has enough card on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() correctly increases handCount of the player by 2 (drawn 3 cards and discarded smithy). Result: FAILED.
Test 1c - cardEffect() correctly places smithy into the played pile. Result: PASSED.
Test 1d - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 1e - cardEffect() correctly decreases player's deckCount by 3. Result: FAILED.
Test 1e - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 1 COMPLETED WITH ERROR(S)! 

Test Case 2: Player does not have enough cards on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() correctly increases handCount of the player by 2 (drawn 3 cards and discarded smithy). Result: FAILED.
Test 1c - cardEffect() correctly places smithy into the played pile. Result: PASSED.
Test 1d - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 1e - cardEffect() correctly updates player's deckCount (equal old discardCount - 3). Result: FAILED.
Test 1e - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 1 COMPLETED WITH ERROR(S)! 

----------Card Test 1: Testing smithy card effect COMPLETED----------

#######################################################################################
----------Card Test 2: Testing adventurer card effect----------

Test Case 1: Player has enough cards on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() correctly increases handCount of the player by 1 (drawn 2 cards and discarded adventurer). Result: FAILED.
Test 1c - cardEffect() correctly places adventurer into the played pile. Result: FAILED.
Test 1d - cardEffect() correctly increases playedCardCount by 1. Result: FAILED.
Test 1e - cardEffect() correctly decreases player's deckCount by 2. Result: FAILED.
Test 1e - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test 1f - cardEffect() correctly gives player 2 treasures card in hand. Result: PASSED.
Test Case 1 COMPLETED WITH ERROR(S)! 

Test Case 2: Player does not have enough cards on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() correctly increases handCount of the player by 1 (drawn 2 cards and discarded adventurer). Result: FAILED.
Test 1c - cardEffect() correctly places adventurer into the played pile. Result: FAILED.
Test 1d - cardEffect() correctly increases playedCardCount by 1. Result: FAILED.
Test 1e - cardEffect() correctly updates player's deckCount (equal old discardCount - 2). Result: FAILED.
Test 1e - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test 1f - cardEffect() correctly gives player 2 treasures card in hand. Result: PASSED.
Test Case 1 COMPLETED WITH ERROR(S)! 

----------Card Test 2: Testing adventurer card effect COMPLETED----------

#######################################################################################
----------Card Test 3: Testing steward card effect----------

Test Case 1: Player chooses + 2 cards and has enough cards on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() does not change the number of coins. Result: PASSED.
Test 1c - cardEffect() correctly increases handCount of the player by 1 (drawn 2 cards and discarded steward). Result: PASSED.
Test 1d - cardEffect() correctly places steward into the played pile. Result: PASSED.
Test 1e - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 1f - cardEffect() correctly decreases player's deckCount by 2. Result: PASSED.
Test 1g - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: Player chooses + 2 cards and does not have enough cards on deck
Test 2a - cardEffect() correctly returns 0. Result: PASSED.
Test 2b - cardEffect() does not change the number of coins. Result: PASSED.
Test 2c - cardEffect() correctly increases handCount of the player by 1 (drawn 2 cards and discarded steward). Result: PASSED.
Test 2d - cardEffect() correctly places steward into the played pile. Result: PASSED.
Test 2e - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 2f - cardEffect() correctly updates player's deckCount (equal old discardCount - 2). Result: PASSED.
Test 2g - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

Test Case 3: Player chooses + 2 coins
Test 3a - cardEffect() correctly returns 0. Result: PASSED.
Test 3b - cardEffect() correctly increases the number of coins by 2. Result: PASSED.
Test 3c - cardEffect() correctly decreases player's handCount by 1 (discarded steward). Result: PASSED.
Test 3d - cardEffect() correctly places steward into the played pile. Result: PASSED.
Test 3e - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 3f - cardEffect() does not change player's deckCount. Result: PASSED.
Test 3g - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 3 COMPLETED SUCCESSFULLY! 

Test Case 4: Player chooses trash 2 cards
Test 4a - cardEffect() correctly returns 0. Result: PASSED.
Test 4b - cardEffect() does not change the number of coins. Result: PASSED.
Test 4c - cardEffect() correctly decreases player's handCount by 3 (trashed 2 cards and discarded steward). Result: PASSED.
Test 4d - cardEffect() correctly places steward into the played pile. Result: PASSED.
Test 4e - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 4f - cardEffect() does not change player's deckCount. Result: PASSED.
Test 4g - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test Case 4 COMPLETED SUCCESSFULLY! 

----------Card Test 4: Testing steward card effect COMPLETED----------

#######################################################################################
----------Card Test 4: Testing great_hall card----------

Test Case 1: Player has enough cards on deck
Test 1a - cardEffect() correctly returns 0. Result: PASSED.
Test 1b - cardEffect() correctly reserves handCount of the player (drawn 1 card and discarded great_hall). Result: PASSED.
Test 1c - cardEffect() correctly places great_hall into the played pile. Result: PASSED.
Test 1d - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 1e - cardEffect() correctly decreases player's deckCount by 1. Result: PASSED.
Test 1f - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test 1g - cardEffect() correctly increases the number of actions by 1. Result: PASSED.
Test Case 1 COMPLETED SUCCESSFULLY! 

Test Case 2: Player does not have enough cards on deck
Test 2a - cardEffect() correctly returns 0. Result: PASSED.
Test 2b - cardEffect() correctly reserves handCount of the player (drawn 1 card and discarded great_hall). Result: PASSED.
Test 2c - cardEffect() correctly places great_hall into the played pile. Result: PASSED.
Test 2d - cardEffect() correctly increases playedCardCount by 1. Result: PASSED.
Test 2e - cardEffect() correctly updates player's deckCount (equal old discardCount - 1). Result: PASSED.
Test 2f - cardEffect() does not change other players' handCount and deckCount. Result: PASSED.
Test 2g - cardEffect() correctly increases the number of actions by 1. Result: PASSED.
Test Case 2 COMPLETED SUCCESSFULLY! 

----------Card Test 4: Testing great_hall card COMPLETED----------

#######################################################################################
File 'dominion.c'
Lines executed:38.83% of 649
Branches executed:41.01% of 417
Taken at least once:33.33% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 660 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      660:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:		return 1;
      660:   11:	if (*(int*)a < * (int*)b)
branch  0 taken 35%
branch  1 taken 65%
      230:   12:		return -1;
      430:   13:	return 0;
      660:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 23 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
       23:   44:	SelectStream(1);
       23:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
       46:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
       23:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
      506:   57:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:	{
     5060:   59:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:		{
     4370:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
     2300:   65:		}
      230:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
       23:   73:	if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:	{
       23:   75:		state->supplyCount[curse] = 10;
       23:   76:	}
    #####:   77:	else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
    #####:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
       23:   87:	if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:	{
       23:   89:		state->supplyCount[estate] = 8;
       23:   90:		state->supplyCount[duchy] = 8;
       23:   91:		state->supplyCount[province] = 8;
       23:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
       23:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
       23:  102:	state->supplyCount[silver] = 40;
       23:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
      966:  106:	for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:	{
     7590:  108:		for (j = 0; j < 10; j++)              //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:		{
     3565:  110:			if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
      437:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:				{
       46:  115:					if (numPlayers == 2) {
branch  0 taken 100%
branch  1 taken 0%
       46:  116:						state->supplyCount[i] = 8;
       46:  117:					}
    #####:  118:					else { state->supplyCount[i] = 12; }
       46:  119:				}
        -:  120:				else
        -:  121:				{
      184:  122:					state->supplyCount[i] = 10;
        -:  123:				}
      230:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
     3335:  128:				state->supplyCount[i] = -1;
        -:  129:			}
     3335:  130:		}
        -:  131:
      460:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      138:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:	{
       46:  140:		state->deckCount[i] = 0;
      368:  141:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:		{
      138:  143:			state->deck[i][j] = estate;
      138:  144:			state->deckCount[i]++;
      138:  145:		}
      736:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:		{
      322:  148:			state->deck[i][j] = copper;
      322:  149:			state->deckCount[i]++;
      322:  150:		}
       46:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      138:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:	{
       46:  156:		if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
       46:  160:	}
        -:  161:
        -:  162:	//draw player hands
      138:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:	{
        -:  165:		//initialize hand size to zero
       46:  166:		state->handCount[i] = 0;
       46:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//  {
        -:  171:		//    drawCard(i, state);
        -:  172:		//  }
       46:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     1288:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:	{
      621:  178:		state->embargoTokens[i] = 0;
      621:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
       23:  182:	state->outpostPlayed = 0;
       23:  183:	state->phase = 0;
       23:  184:	state->numActions = 1;
       23:  185:	state->numBuys = 1;
       23:  186:	state->playedCardCount = 0;
       23:  187:	state->whoseTurn = 0;
       23:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
      276:  192:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      115:  193:		drawCard(state->whoseTurn, state);
      115:  194:	}
        -:  195:
       23:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
       23:  198:	return 0;
       23:  199:}
        -:  200:
function shuffle called 57 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       57:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       57:  209:	if (state->deckCount[player] < 1)
branch  0 taken 12%
branch  1 taken 88%
        7:  210:		return -1;
       50:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1060:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      480:  215:		card = floor(Random() * state->deckCount[player]);
      480:  216:		newDeck[newDeckPos] = state->deck[player][card];
      480:  217:		newDeckPos++;
     2948:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 67%
branch  1 taken 33%
      994:  219:			state->deck[player][i] = state->deck[player][i + 1];
      994:  220:		}
      480:  221:		state->deckCount[player]--;
        -:  222:	}
     1060:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      480:  224:		state->deck[player][i] = newDeck[i];
      480:  225:		state->deckCount[player]++;
      480:  226:	}
        -:  227:
       50:  228:	return 0;
       57:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) < 1) {
branch  0 never executed
branch  1 never executed
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  291:		if (DEBUG)
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase = 1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 20 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
       20:  326:	int count = 0;
        -:  327:
    11140:  328:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  329:	{
     8216:  330:		if (state->deck[player][i] == card) count++;
branch  0 taken 48%
branch  1 taken 52%
     5550:  331:	}
        -:  332:
    11200:  333:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  334:	{
     7830:  335:		if (state->hand[player][i] == card) count++;
branch  0 taken 40%
branch  1 taken 60%
     5580:  336:	}
        -:  337:
    11012:  338:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  339:	{
     7937:  340:		if (state->discard[player][i] == card) count++;
branch  0 taken 45%
branch  1 taken 55%
     5486:  341:	}
        -:  342:
       20:  343:	return count;
        -:  344:}
        -:  345:
function whoseTurn called 10 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       10:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:	}
        -:  366:	else {
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
        6:  395:	if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  396:	{
        2:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
        4:  401:	j = 0;
      208:  402:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:	{
      100:  404:		if (state->supplyCount[i] == 0)
branch  0 taken 9%
branch  1 taken 91%
        -:  405:		{
        9:  406:			j++;
        9:  407:		}
      100:  408:	}
        4:  409:	if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  410:	{
        2:  411:		return 1;
        -:  412:	}
        -:  413:
        2:  414:	return 0;
        6:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:		{
    #####:  469:			players[i] = -9999;
    #####:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
    #####:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:		{
    #####:  483:			j = i;
    #####:  484:		}
    #####:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:		{
    #####:  494:			players[i]++;
    #####:  495:		}
    #####:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:		{
    #####:  504:			j = i;
    #####:  505:		}
    #####:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:		{
    #####:  514:			players[i] = 1;
    #####:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
    #####:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
function drawCard called 141 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
      141:  528:	if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 5%
branch  1 taken 95%
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       54:  533:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 74%
branch  1 taken 26%
       20:  534:			state->deck[player][i] = state->discard[player][i];
       20:  535:			state->discard[player][i] = -1;
       20:  536:		}
        -:  537:
        7:  538:		state->deckCount[player] = state->discardCount[player];
        7:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
        7:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG) { //Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
        7:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
        7:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG) { //Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
        7:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        7:  559:		if (deckCounter == 0)
branch  0 taken 43%
branch  1 taken 57%
        3:  560:			return -1;
        -:  561:
        4:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:		state->deckCount[player]--;
        4:  564:		state->handCount[player]++;//Increment hand count
        4:  565:	}
        -:  566:
        -:  567:	else {
      134:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG) { //Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
      134:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
      134:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      134:  576:		state->deckCount[player]--;
      134:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
      138:  580:	return 0;
      141:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:	switch ( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:	{
        -:  587:	case curse:
        1:  588:		return 0;
        -:  589:	case estate:
        1:  590:		return 2;
        -:  591:	case duchy:
        1:  592:		return 5;
        -:  593:	case province:
        1:  594:		return 8;
        -:  595:	case copper:
        1:  596:		return 0;
        -:  597:	case silver:
        1:  598:		return 3;
        -:  599:	case gold:
        1:  600:		return 6;
        -:  601:	case adventurer:
        1:  602:		return 6;
        -:  603:	case council_room:
        1:  604:		return 5;
        -:  605:	case feast:
        1:  606:		return 4;
        -:  607:	case gardens:
        1:  608:		return 4;
        -:  609:	case mine:
        1:  610:		return 5;
        -:  611:	case remodel:
        1:  612:		return 4;
        -:  613:	case smithy:
        1:  614:		return 4;
        -:  615:	case village:
        1:  616:		return 3;
        -:  617:	case baron:
        1:  618:		return 4;
        -:  619:	case great_hall:
        1:  620:		return 3;
        -:  621:	case minion:
        1:  622:		return 5;
        -:  623:	case steward:
        1:  624:		return 3;
        -:  625:	case tribute:
        1:  626:		return 5;
        -:  627:	case ambassador:
        1:  628:		return 3;
        -:  629:	case cutpurse:
        1:  630:		return 4;
        -:  631:	case embargo:
        1:  632:		return 2;
        -:  633:	case outpost:
        1:  634:		return 5;
        -:  635:	case salvager:
        1:  636:		return 4;
        -:  637:	case sea_hag:
        1:  638:		return 4;
        -:  639:	case treasure_map:
        1:  640:		return 4;
        -:  641:	}
        -:  642:
        1:  643:	return -1;
       28:  644:}
        -:  645:
function cardEffect called 10 returned 100% blocks executed 6%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:	int i;
        -:  649:	int j;
        -:  650:	int k;
        -:  651:	int x;
        -:  652:	int index;
       10:  653:	int currentPlayer = whoseTurn(state);
       10:  654:	int nextPlayer = currentPlayer + 1;
        -:  655:
       10:  656:	int tributeRevealedCards[2] = { -1, -1};
        -:  657:	int temphand[MAX_HAND];// moved above the if statement
       10:  658:	int drawntreasure = 0;
        -:  659:	int cardDrawn;
       10:  660:	int z = 0;// this is the counter for the temp hand
       10:  661:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:		nextPlayer = 0;
    #####:  663:	}
        -:  664:
        -:  665:
        -:  666:	//uses switch to select card and perform actions
       10:  667:	switch ( card )
branch  0 taken 20%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 20%
branch 10 taken 0%
branch 11 taken 40%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:	{
        -:  669:	case adventurer:
        2:  670:		adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, &temphand, z);
        2:  671:		return 0;
        -:  672:
        -:  673:	case council_room:
        -:  674:		//+4 Cards
    #####:  675:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  676:		{
    #####:  677:			drawCard(currentPlayer, state);
    #####:  678:		}
        -:  679:
        -:  680:		//+1 Buy
    #####:  681:		state->numBuys++;
        -:  682:
        -:  683:		//Each other player draws a card
    #####:  684:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  685:		{
    #####:  686:			if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  687:			{
    #####:  688:				drawCard(i, state);
    #####:  689:			}
    #####:  690:		}
        -:  691:
        -:  692:		//put played card in played card pile
    #####:  693:		discardCard(handPos, currentPlayer, state, 0);
        -:  694:
    #####:  695:		return 0;
        -:  696:
        -:  697:	case feast:
        -:  698:		//gain card with cost up to 5
        -:  699:		//Backup hand
    #####:  700:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  701:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:			state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  703:		}
        -:  704:		//Backup hand
        -:  705:
        -:  706:		//Update Coins for Buy
    #####:  707:		updateCoins(currentPlayer, state, 5);
    #####:  708:		x = 1;//Condition to loop on
    #####:  709:		while ( x == 1) { //Buy one card
branch  0 never executed
branch  1 never executed
    #####:  710:			if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  711:				if (DEBUG)
        -:  712:					printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:				if (DEBUG) {
        -:  715:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:				}
    #####:  717:			}
    #####:  718:			else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  719:				printf("That card is too expensive!\n");
        -:  720:
        -:  721:				if (DEBUG) {
        -:  722:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:				}
    #####:  724:			}
        -:  725:			else {
        -:  726:
        -:  727:				if (DEBUG) {
        -:  728:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:				}
        -:  730:
    #####:  731:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:				x = 0;//No more buying cards
        -:  733:
        -:  734:				if (DEBUG) {
        -:  735:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:				}
        -:  737:
        -:  738:			}
        -:  739:		}
        -:  740:
        -:  741:		//Reset Hand
    #####:  742:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  743:			state->hand[currentPlayer][i] = temphand[i];
    #####:  744:			temphand[i] = -1;
    #####:  745:		}
        -:  746:		//Reset Hand
        -:  747:
    #####:  748:		return 0;
        -:  749:
        -:  750:	case gardens:
    #####:  751:		return -1;
        -:  752:
        -:  753:	case mine:
    #####:  754:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  757:		{
    #####:  758:			return -1;
        -:  759:		}
        -:  760:
    #####:  761:		if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:		{
    #####:  763:			return -1;
        -:  764:		}
        -:  765:
    #####:  766:		if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  767:		{
    #####:  768:			return -1;
        -:  769:		}
        -:  770:
    #####:  771:		gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:		//discard card from hand
    #####:  774:		discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:		//discard trashed card
    #####:  777:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  778:		{
    #####:  779:			if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  780:			{
    #####:  781:				discardCard(i, currentPlayer, state, 0);
    #####:  782:				break;
        -:  783:			}
    #####:  784:		}
        -:  785:
    #####:  786:		return 0;
        -:  787:
        -:  788:	case remodel:
    #####:  789:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:		if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  792:		{
    #####:  793:			return -1;
        -:  794:		}
        -:  795:
    #####:  796:		gainCard(choice2, state, 0, currentPlayer);
        -:  797:
        -:  798:		//discard card from hand
    #####:  799:		discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:		//discard trashed card
    #####:  802:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  803:		{
    #####:  804:			if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  805:			{
    #####:  806:				discardCard(i, currentPlayer, state, 0);
    #####:  807:				break;
        -:  808:			}
    #####:  809:		}
        -:  810:
        -:  811:
    #####:  812:		return 0;
        -:  813:
        -:  814:	case smithy:
        2:  815:		smithyEffect(currentPlayer, state, handPos);
        2:  816:		return 0;
        -:  817:
        -:  818:	case village:
        -:  819:		//+1 Card
    #####:  820:		drawCard(currentPlayer, state);
        -:  821:
        -:  822:		//+2 Actions
    #####:  823:		state->numActions = state->numActions + 2;
        -:  824:
        -:  825:		//discard played card from hand
    #####:  826:		discardCard(handPos, currentPlayer, state, 0);
    #####:  827:		return 0;
        -:  828:
        -:  829:	case baron:
    #####:  830:		state->numBuys++;//Increase buys by 1!
    #####:  831:		if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  832:			int p = 0;//Iterator for hand!
    #####:  833:			int card_not_discarded = 1;//Flag for discard set!
    #####:  834:			while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  835:				if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  836:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  837:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  838:					state->discardCount[currentPlayer]++;
    #####:  839:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  840:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  841:					}
    #####:  842:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  843:					state->handCount[currentPlayer]--;
    #####:  844:					card_not_discarded = 0;//Exit the loop
    #####:  845:				}
    #####:  846:				else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  847:					if (DEBUG) {
        -:  848:						printf("No estate cards in your hand, invalid choice\n");
        -:  849:						printf("Must gain an estate if there are any\n");
        -:  850:					}
    #####:  851:					if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  852:						gainCard(estate, state, 0, currentPlayer);
    #####:  853:						state->supplyCount[estate]--;//Decrement estates
    #####:  854:						if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  855:							isGameOver(state);
    #####:  856:						}
    #####:  857:					}
    #####:  858:					card_not_discarded = 0;//Exit the loop
    #####:  859:				}
        -:  860:
        -:  861:				else {
    #####:  862:					p++;//Next card
        -:  863:				}
        -:  864:			}
    #####:  865:		}
        -:  866:
        -:  867:		else {
    #####:  868:			if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  869:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  870:				state->supplyCount[estate]--;//Decrement Estates
    #####:  871:				if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  872:					isGameOver(state);
    #####:  873:				}
    #####:  874:			}
        -:  875:		}
        -:  876:
        -:  877:
    #####:  878:		return 0;
        -:  879:
        -:  880:	case great_hall:
        -:  881:		//+1 Card
        2:  882:		drawCard(currentPlayer, state);
        -:  883:
        -:  884:		//+1 Actions
        2:  885:		state->numActions++;
        -:  886:
        -:  887:		//discard card from hand
        2:  888:		discardCard(handPos, currentPlayer, state, 0);
        2:  889:		return 0;
        -:  890:
        -:  891:	case minion:
        -:  892:		//+1 action
    #####:  893:		state->numActions++;
        -:  894:
        -:  895:		//discard card from hand
    #####:  896:		discardCard(handPos, currentPlayer, state, 0);
        -:  897:
    #####:  898:		if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  899:		{
    #####:  900:			state->coins = state->coins + 2;
    #####:  901:		}
        -:  902:
    #####:  903:		else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  904:		{
        -:  905:			//discard hand
    #####:  906:			while (numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:				discardCard(handPos, currentPlayer, state, 0);
        -:  909:			}
        -:  910:
        -:  911:			//draw 4
    #####:  912:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  913:			{
    #####:  914:				drawCard(currentPlayer, state);
    #####:  915:			}
        -:  916:
        -:  917:			//other players discard hand and redraw if hand size > 4
    #####:  918:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  919:			{
    #####:  920:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  921:				{
    #####:  922:					if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  923:					{
        -:  924:						//discard hand
    #####:  925:						while ( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  926:						{
    #####:  927:							discardCard(handPos, i, state, 0);
        -:  928:						}
        -:  929:
        -:  930:						//draw 4
    #####:  931:						for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  932:						{
    #####:  933:							drawCard(i, state);
    #####:  934:						}
    #####:  935:					}
    #####:  936:				}
    #####:  937:			}
        -:  938:
    #####:  939:		}
    #####:  940:		return 0;
        -:  941:
        -:  942:	case steward:
        4:  943:		if (choice1 == 1)
branch  0 taken 50%
branch  1 taken 50%
        -:  944:		{
        -:  945:			//+2 cards
        2:  946:			drawCard(currentPlayer, state);
        2:  947:			drawCard(currentPlayer, state);
        2:  948:		}
        2:  949:		else if (choice1 == 2)
branch  0 taken 50%
branch  1 taken 50%
        -:  950:		{
        -:  951:			//+2 coins
        1:  952:			state->coins = state->coins + 2;
        1:  953:		}
        -:  954:		else
        -:  955:		{
        -:  956:			//trash 2 cards in hand
        1:  957:			discardCard(choice2, currentPlayer, state, 1);
        1:  958:			discardCard(choice3, currentPlayer, state, 1);
        -:  959:		}
        -:  960:
        -:  961:		//discard card from hand
        4:  962:		discardCard(handPos, currentPlayer, state, 0);
        4:  963:		return 0;
        -:  964:
        -:  965:	case tribute:
    #####:  966:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  967:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  968:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  969:				state->deckCount[nextPlayer]--;
    #####:  970:			}
    #####:  971:			else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  972:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  973:				state->discardCount[nextPlayer]--;
    #####:  974:			}
        -:  975:			else {
        -:  976:				//No Card to Reveal
        -:  977:				if (DEBUG) {
        -:  978:					printf("No cards to reveal\n");
        -:  979:				}
        -:  980:			}
    #####:  981:		}
        -:  982:
        -:  983:		else {
    #####:  984:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  985:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  986:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  987:					state->deckCount[nextPlayer]++;
    #####:  988:					state->discard[nextPlayer][i] = -1;
    #####:  989:					state->discardCount[nextPlayer]--;
    #####:  990:				}
        -:  991:
    #####:  992:				shuffle(nextPlayer, state); //Shuffle the deck
    #####:  993:			}
    #####:  994:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  995:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  996:			state->deckCount[nextPlayer]--;
    #####:  997:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  998:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  999:			state->deckCount[nextPlayer]--;
        -: 1000:		}
        -: 1001:
    #####: 1002:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1003:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1004:			state->playedCardCount++;
    #####: 1005:			tributeRevealedCards[1] = -1;
    #####: 1006:		}
        -: 1007:
    #####: 1008:		for (i = 0; i <= 2; i ++) {
branch  0 never executed
branch  1 never executed
    #####: 1009:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1010:				state->coins += 2;
    #####: 1011:			}
        -: 1012:
    #####: 1013:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1014:				drawCard(currentPlayer, state);
    #####: 1015:				drawCard(currentPlayer, state);
    #####: 1016:			}
        -: 1017:			else { //Action Card
    #####: 1018:				state->numActions = state->numActions + 2;
        -: 1019:			}
    #####: 1020:		}
        -: 1021:
    #####: 1022:		return 0;
        -: 1023:
        -: 1024:	case ambassador:
    #####: 1025:		j = 0;    //used to check if player has enough cards to discard
        -: 1026:
    #####: 1027:		if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1028:		{
    #####: 1029:			return -1;
        -: 1030:		}
        -: 1031:
    #####: 1032:		if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1033:		{
    #####: 1034:			return -1;
        -: 1035:		}
        -: 1036:
    #####: 1037:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1038:		{
    #####: 1039:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1040:			{
    #####: 1041:				j++;
    #####: 1042:			}
    #####: 1043:		}
    #####: 1044:		if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1045:		{
    #####: 1046:			return -1;
        -: 1047:		}
        -: 1048:
        -: 1049:		if (DEBUG)
        -: 1050:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1051:
        -: 1052:		//increase supply count for choosen card by amount being discarded
    #####: 1053:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1054:
        -: 1055:		//each other player gains a copy of revealed card
    #####: 1056:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1057:		{
    #####: 1058:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1059:			{
    #####: 1060:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1061:			}
    #####: 1062:		}
        -: 1063:
        -: 1064:		//discard played card from hand
    #####: 1065:		discardCard(handPos, currentPlayer, state, 0);
        -: 1066:
        -: 1067:		//trash copies of cards returned to supply
    #####: 1068:		for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1069:		{
    #####: 1070:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1071:			{
    #####: 1072:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1073:				{
    #####: 1074:					discardCard(i, currentPlayer, state, 1);
    #####: 1075:					break;
        -: 1076:				}
    #####: 1077:			}
    #####: 1078:		}
        -: 1079:
    #####: 1080:		return 0;
        -: 1081:
        -: 1082:	case cutpurse:
        -: 1083:
    #####: 1084:		updateCoins(currentPlayer, state, 2);
    #####: 1085:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:		{
    #####: 1087:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1088:			{
    #####: 1089:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1090:				{
    #####: 1091:					if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1092:					{
    #####: 1093:						discardCard(j, i, state, 0);
    #####: 1094:						break;
        -: 1095:					}
    #####: 1096:					if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1097:					{
    #####: 1098:						for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1099:						{
        -: 1100:							if (DEBUG)
        -: 1101:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1102:						}
    #####: 1103:						break;
        -: 1104:					}
    #####: 1105:				}
        -: 1106:
    #####: 1107:			}
        -: 1108:
    #####: 1109:		}
        -: 1110:
        -: 1111:		//discard played card from hand
    #####: 1112:		discardCard(handPos, currentPlayer, state, 0);
        -: 1113:
    #####: 1114:		return 0;
        -: 1115:
        -: 1116:	case embargo:
    #####: 1117:		embargoEffect(state, choice1, handPos, currentPlayer);
    #####: 1118:		return 0;
        -: 1119:
        -: 1120:	case outpost:
    #####: 1121:		outpostEffect(state, handPos, currentPlayer);
    #####: 1122:		return 0;
        -: 1123:
        -: 1124:	case salvager:
        -: 1125:		//+1 buy
    #####: 1126:		state->numBuys++;
        -: 1127:
    #####: 1128:		if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1129:		{
        -: 1130:			//gain coins equal to trashed card
    #####: 1131:			state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1132:			//trash card
    #####: 1133:			discardCard(choice1, currentPlayer, state, 1);
    #####: 1134:		}
        -: 1135:
        -: 1136:		//discard card
    #####: 1137:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1138:		return 0;
        -: 1139:
        -: 1140:	case sea_hag:
    #####: 1141:		seahagEffect(state, currentPlayer);
    #####: 1142:		return 0;
        -: 1143:
        -: 1144:	case treasure_map:
        -: 1145:		//search hand for another treasure_map
    #####: 1146:		index = -1;
    #####: 1147:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1148:		{
    #####: 1149:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1150:			{
    #####: 1151:				index = i;
    #####: 1152:				break;
        -: 1153:			}
    #####: 1154:		}
    #####: 1155:		if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1156:		{
        -: 1157:			//trash both treasure cards
    #####: 1158:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1159:			discardCard(index, currentPlayer, state, 1);
        -: 1160:
        -: 1161:			//gain 4 Gold cards
    #####: 1162:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:			{
    #####: 1164:				gainCard(gold, state, 1, currentPlayer);
    #####: 1165:			}
        -: 1166:
        -: 1167:			//return success
    #####: 1168:			return 1;
        -: 1169:		}
        -: 1170:
        -: 1171:		//no second treasure_map found in hand
    #####: 1172:		return -1;
        -: 1173:	}
        -: 1174:
    #####: 1175:	return -1;
       10: 1176:}
        -: 1177:
function discardCard called 10 returned 100% blocks executed 80%
        -: 1178:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1179:{
        -: 1180:
        -: 1181:	//if card is not trashed, added to Played pile
       10: 1182:	if (trashFlag < 1)
branch  0 taken 80%
branch  1 taken 20%
        -: 1183:	{
        -: 1184:		//add card to played pile
        8: 1185:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1186:		state->playedCardCount++;
        8: 1187:	}
        -: 1188:
        -: 1189:	//set played card to -1
       10: 1190:	state->hand[currentPlayer][handPos] = -1;
        -: 1191:
        -: 1192:	//remove card from player's hand
       10: 1193:	if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:	{
        -: 1195:		//reduce number of cards in hand
    #####: 1196:		state->handCount[currentPlayer]--;
    #####: 1197:	}
       10: 1198:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:	{
        -: 1200:		//reduce number of cards in hand
    #####: 1201:		state->handCount[currentPlayer]--;
    #####: 1202:	}
        -: 1203:	else
        -: 1204:	{
        -: 1205:		//replace discarded card with last card in hand
       10: 1206:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:		//set last card to -1
       10: 1208:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:		//reduce number of cards in hand
       10: 1210:		state->handCount[currentPlayer]--;
        -: 1211:	}
        -: 1212:
       10: 1213:	return 0;
        -: 1214:}
        -: 1215:
function gainCard called 5 returned 100% blocks executed 100%
        -: 1216:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1217:{
        -: 1218:	//Note: supplyPos is enum of choosen card
        -: 1219:
        -: 1220:	//check if supply pile is empty (0) or card is not used in game (-1)
        5: 1221:	if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1222:	{
        2: 1223:		return -1;
        -: 1224:	}
        -: 1225:
        -: 1226:	//added card for [whoseTurn] current player:
        -: 1227:	// toFlag = 0 : add to discard
        -: 1228:	// toFlag = 1 : add to deck
        -: 1229:	// toFlag = 2 : add to hand
        -: 1230:
        3: 1231:	if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1232:	{
        1: 1233:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1234:		state->deckCount[player]++;
        1: 1235:	}
        2: 1236:	else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1237:	{
        1: 1238:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1239:		state->handCount[player]++;
        1: 1240:	}
        -: 1241:	else
        -: 1242:	{
        1: 1243:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1244:		state->discardCount[player]++;
        -: 1245:	}
        -: 1246:
        -: 1247:	//decrease number in supply pile
        3: 1248:	state->supplyCount[supplyPos]--;
        -: 1249:
        3: 1250:	return 0;
        5: 1251:}
        -: 1252:
function updateCoins called 23 returned 100% blocks executed 85%
        -: 1253:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1254:{
        -: 1255:	int i;
        -: 1256:
        -: 1257:	//reset coin count
       23: 1258:	state->coins = 0;
        -: 1259:
        -: 1260:	//add coins for each Treasure card in player's hand
      276: 1261:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1262:	{
      115: 1263:		if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1264:		{
       92: 1265:			state->coins += 1;
       92: 1266:		}
       23: 1267:		else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1268:		{
    #####: 1269:			state->coins += 2;
    #####: 1270:		}
       23: 1271:		else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1272:		{
    #####: 1273:			state->coins += 3;
    #####: 1274:		}
      115: 1275:	}
        -: 1276:
        -: 1277:	//add bonus
       23: 1278:	state->coins += bonus;
        -: 1279:
       23: 1280:	return 0;
        -: 1281:}
        -: 1282:
function adventurerEffect called 2 returned 100% blocks executed 100%
        -: 1283:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int* temphand, int z) {
       28: 1284:	while (drawntreasure <= 2) {
branch  0 taken 86%
branch  1 taken 14%
       12: 1285:		if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 33%
branch  1 taken 67%
        4: 1286:			shuffle(currentPlayer, state);
        4: 1287:		}
       12: 1288:		drawCard(currentPlayer, state);
       12: 1289:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       24: 1290:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6: 1291:			drawntreasure++;
        -: 1292:		else {
        6: 1293:			temphand[z] = cardDrawn;
        6: 1294:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6: 1295:			z++;
        -: 1296:		}
        -: 1297:	}
       16: 1298:	while (z - 1 >= 0) {
branch  0 taken 75%
branch  1 taken 25%
        6: 1299:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        6: 1300:		z = z - 1;
        -: 1301:	}
        -: 1302:
        2: 1303:	return 0;
        -: 1304:}
        -: 1305:
function smithyEffect called 2 returned 100% blocks executed 100%
        -: 1306:int smithyEffect (int currentPlayer, struct gameState *state, int handPos) {
        -: 1307:
        -: 1308:	int i;
        -: 1309:
        -: 1310:	//+3 Cards
       20: 1311:	for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1312:	{
        8: 1313:		drawCard(currentPlayer, state);
        8: 1314:	}
        -: 1315:
        -: 1316:	//discard card from hand
        2: 1317:	discardCard(handPos, currentPlayer, state, 0);
        2: 1318:}
        -: 1319:
function outpostEffect called 0 returned 0% blocks executed 0%
        -: 1320:int outpostEffect(struct gameState *state, int handPos, int currentPlayer) {
        -: 1321:	//set outpost flag
    #####: 1322:	state->outpostPlayed++;
        -: 1323:
        -: 1324:	//discard card
    #####: 1325:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1326:}
        -: 1327:
function embargoEffect called 0 returned 0% blocks executed 0%
        -: 1328:int embargoEffect (struct gameState *state, int choice1, int handPos, int currentPlayer) {
        -: 1329:	//+2 Coins
    #####: 1330:	state->coins = state->coins + 5;
        -: 1331:
        -: 1332:	//see if selected pile is in play
    #####: 1333:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1334:	{
    #####: 1335:		return -1;
        -: 1336:	}
        -: 1337:
        -: 1338:	//add embargo token to selected supply pile
    #####: 1339:	state->embargoTokens[choice1]++;
        -: 1340:
        -: 1341:	//trash card
    #####: 1342:	discardCard(handPos, currentPlayer, state, 1);
    #####: 1343:}
        -: 1344:
function seahagEffect called 0 returned 0% blocks executed 0%
        -: 1345:int seahagEffect (struct gameState *state, int currentPlayer) {
        -: 1346:	int i;
        -: 1347:
    #####: 1348:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1349:		if (i == currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1350:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];         state->deckCount[i]--;
    #####: 1351:			state->discardCount[i]++;
    #####: 1352:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1353:		}
    #####: 1354:	}
    #####: 1355:}
        -: 1356://end of dominion.c
        -: 1357:
#######################################################################################
gainCard() coverage
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls
#######################################################################################
isGameOver() coverage
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls
#######################################################################################
fullDeckCount() coverage
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls
#######################################################################################
getCost() coverage
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls
#######################################################################################
smithyEffect() coverage
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
#######################################################################################
adventurerEffect() coverage
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls
#######################################################################################
cardEffect() coverage
Lines executed:10.31% of 262
Branches executed:15.08% of 179
Taken at least once:5.03% of 179
No calls
#######################################################################################
